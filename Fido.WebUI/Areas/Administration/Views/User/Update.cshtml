@model Fido.Action.Models.UserModel
@using Fido.Action.Models

@{
    ViewBag.Title = "Update User";
}

@using (Html.BeginForm("Update", "User", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()

    @Html.Hidden("Id", Model.Id)
    @Html.Hidden("CreatedUtc", Model.CreatedUtc)
    @Html.Hidden("IsNew", Model.IsNew)
    @Html.Hidden("RowVersion", Model.RowVersion)

    <div class="well">

        <div class="row">
            @if (Model.HasLocalCredentials)
            {
                <div class="col-xs-12 skd-padding">
                    <div>Password @Model.PasswordAgeDays day(s) old</div>
                </div>
            }

            <div class="col-xs-6 skd-padding">
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-user"></i></span>
                    @Html.TextBoxFor(m => m.EmailAddress, new { @class = "form-control", @placeholder = "no local credentials", @value = "", @disabled = "true" })
                </div>
            </div>
            <div class="col-xs-3 skd-padding">
                <div class="input-group">
                    @if (Model.HasLocalCredentials)
                    {
                        @Html.DropDownListFor(m => m.LocalCredentialState, new SelectList(
                            Model.AllLocalCredentialStates,
                            Model.LocalCredentialState),
                            new { @class = "form-control", @placeholder = "local credential state", @value = "" })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.LocalCredentialState, new { @class = "form-control", @placeholder = "local credential state", @value = "", @disabled = "true" })    
                    }
                </div>
            </div>
            <div class="col-xs-3 skd-padding">
                @if(Model.HasLocalCredentials)
                {
                    @Html.ActionLink("Delete", "Delete", "LocalCredential", new LocalCredentialModel { Id = Model.Id, EmailAddress = Model.EmailAddress }, new { @class = "modal-link skd-fake-button skd-colour-button skd-table-cell" })
                }
                else
                {
                    @Html.ActionLink("Create", "Create", "LocalCredential", null, new { @class = "modal-link skd-fake-button skd-colour-button skd-table-cell" })
                }
            </div>
        </div>

        <div class="row col-centered">
            <div class="col-xs-6 skd-padding">
                @{
                    string facebook_colour = "skd-colour-info";
                    if (Model.HasFacebook) { facebook_colour = "skd-colour-facebook"; }

                    string twitter_colour = "skd-colour-info";
                    if (Model.HasTwitter) { twitter_colour = "skd-colour-twitter"; }

                    string linkedin_colour = "skd-colour-info";
                    if (Model.HasLinkedIn) { linkedin_colour = "skd-colour-linkedin"; }

                    string google_colour = "skd-colour-info";
                    if (Model.HasGoogle) { google_colour = "skd-colour-google"; }
                }

                <div class="col-xs-3 @facebook_colour">
                    <span><i class="fa fa-facebook"></i></span>
                </div>
                <div class="col-xs-3 @twitter_colour">
                    <span><i class="fa fa-twitter"></i></span>
                </div>
                <div class="col-xs-3 @linkedin_colour">
                    <span><i class="fa fa-linkedin"></i></span>
                </div>
                <div class="col-xs-3 @google_colour">
                    <span><i class="fa fa-google-plus"></i></span>
                </div>
            </div>
            <div class="col-xs-3 skd-padding">
                <div class="input-group">
                    @if (Model.HasExternalCredentials)
                    {
                        @Html.DropDownListFor(m => m.ExternalCredentialState, new SelectList(
                            Model.AllExternalCredentialStates,
                            Model.ExternalCredentialState),
                            new { @class = "form-control", @placeholder = "external credential state", @value = "" })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.ExternalCredentialState, new { @class = "form-control", @placeholder = "external credential state", @value = "", @disabled = "true" })
                    }
                </div>
            </div>
        </div>

        <div class="visible-xs">
            <span class="skd-spacing"></span>
        </div>
        
        @Html.Partial("UserForm", Model)
        
    </div>
}
